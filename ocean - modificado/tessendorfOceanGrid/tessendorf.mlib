<?xml version="1.0" ?>
<materialLib name="Ocean">

	<renderTargets>
	
		<renderTarget name="heightMap">
			<SIZE width="SSIZE" height="SSIZE" />
			<colors>
				<color name="heightMap" internalFormat="R32F" />
			</colors>
		</renderTarget>
		
		<!--renderTarget name="sky">
			<SIZE width="512" height="512" />
			<colors>
				<color name="sky" internalFormat="RGBA" />
			</colors>
		</renderTarget-->
	</renderTargets>
	
	
	<textures>
		
		<texture name="noise1" filename="../common/textures/noise.jpg" mipmap="0" />
		<texture name="voronoi" filename="../common/textures/voronoi.jpg" mipmap="1" />
		<texture name="foam" filename="../common/textures/thick-foam-bw.jpg" mipmap="1" />
		<texture name="sky" filename="../common/textures/sky.png" mipmap="0" />


		<texture name ="test" >
			<WIDTH value="SSIZE" />
			<HEIGHT value="SSIZE" />
			<INTERNAL_FORMAT value="RGBA32F" />
		</texture>

		<texture name ="h0k" >
			<WIDTH value="SSIZE" />
			<HEIGHT value="SSIZE" />
			<INTERNAL_FORMAT value="RGBA32F" />
		</texture>

		<texture name="hkt">
			<WIDTH value="SSIZE" />
			<HEIGHT value="SSIZE" />
			<LAYERS value=2 />
			<LEVELS value = "L2SIZE_PLUS1" />
			<INTERNAL_FORMAT value="RGBA32F" />
		</texture>

		<texture name="pingpong">
			<WIDTH value="SSIZE" />
			<HEIGHT value="SSIZE" />
			<LAYERS value=2 />
			<INTERNAL_FORMAT value="RGBA32F" />
		</texture>

		<texture name="random" mipmap=0>
			<WIDTH value="SSIZE"/>
			<HEIGHT value="SSIZE" /> 
			<CONTENT value="RANDOM_UNIFORM" />
		</texture>		
	</textures>

	<buffers>
		<buffer name="position">
			<DIM x="1" y="1" z=1/> 
			<structure>
				<field value="FLOAT" />
				<field value="FLOAT" />
				<field value="FLOAT" />
				<field value="FLOAT" />
			</structure>	
		</buffer>
		<!-- usefull for debuggin purposes and store stable depth -->
		<buffer name="oceanInfo">
			<DIM x="SSIZE" y="SSIZE" z=1 />
			<structure>
				<field value="VEC4" />
			</structure>
		</buffer>
	</buffers>
	
	<shaders>
	
		<shader name="h0">
			<vs>
				<file name= "../new/fft.vert" />
			</vs>
			<ps>
				<file name= "../new/fft_h0.frag" />
			</ps>
		</shader>
		<shader name="hkt">
			<vs>
				<file name= "../new/fft.vert" />
			</vs>
			<ps>
				<file name= "../new/fft_hkt.frag" />
			</ps>
		</shader>
		
		<!-- compute shader to perform a single butterfly -->
		<shader name="butterflyH" > 
			<vs>
				<file name= "../new/fft.vert" />
			</vs>
			<ps>
				<file name= "../new/butterflyH.frag" />
			</ps>
		</shader>
		<shader name="butterflyV" > 
			<vs>
				<file name= "../new/fft.vert" />
			</vs>
			<ps>
				<file name= "../new/butterflyV.frag" />
			</ps>
		</shader>

		<shader name="ocean" >	
			<vs>
				<file name= "../common/shaders/header.glsl" />
				<file name= "../common/shaders/definesGlobal.glsl" />
				<file name= "../common/shaders/defines.glsl" />
				<file name= "shaders/ocean.vert" />
			</vs>
			<ps>
				<file name= "../common/shaders/header.glsl" />
				<file name= "shaders/oceanheader.glsl" />
				<file name= "../common/shaders/definesGlobal.glsl" />
				<file name= "../common/shaders/defines.glsl" />
				<file name = "../common/shaders/sky.glsl" />
				<file name= "../common/shaders/oceanColor.glsl" />
				<file name = "shaders/ocean.frag" /> 
			</ps>	
		</shader>
				
		<shader name="lambert" >
			<vs>
				<file name= "../common/shaders/header.glsl" />
				<file name= "../common/shaders/definesGlobal.glsl" />
				<file name= "../common/shaders/defines.glsl" />
				<file name= "shaders/lambert.vert" />
			</vs>
			<ps>
				<file name= "shaders/lambert.frag" />
			</ps>	
		</shader>						
	</shaders>
	
	
	<materials>
	
		<material name="fft_h0">

			<shader name="h0">
				<values>
					<valueof uniform="texRnd"
							 type="TEXTURE_BINDING" context="CURRENT"
							 id=0 component="UNIT" />

					<valueof uniform="randomDistribution"
							 type="RENDERER" context="CURRENT"
							 component="randomDistribution" />

					<valueof uniform="h0k"
							 type="IMAGE_TEXTURE" context="CURRENT"
							 id=0 component="UNIT" />

					<valueof uniform="spectrum"
							 type="RENDERER" context="CURRENT"
							 component="spectrum" />

					<valueof uniform="dispersionMode"
							 type="RENDERER" context="CURRENT"
							 component="dispersion" />

					<valueof uniform="directionalMode"
							 type="RENDERER" context="CURRENT"
							 component="dirSpreading" />

					<valueof uniform="swell"
							 type="RENDERER" context="CURRENT"
							 component="swell" />

					<valueof uniform="spectrumScale"
							 type="RENDERER" context="CURRENT"
							 component="spectrumScale" />

					<valueof uniform="fetch"
							 type="RENDERER" context="CURRENT"
							 component="fetch" />

					<valueof uniform="depth"
							 type="RENDERER" context="CURRENT"
							 component="oceanDepth" />

					<valueof uniform="L"
							 type="RENDERER" context="CURRENT"
							 component="L" />

					<valueof uniform="width"
							 type="RENDERER" context="CURRENT"
							 component="width" />

					<valueof uniform="windDir"
							 type="RENDERER" context="CURRENT"
							 component="windDir" />

					<valueof uniform="windSpeed"
							 type="RENDERER" context="CURRENT"
							 component="windSpeed" />
						
					<valueof uniform="propagate"
							 type="RENDERER" context="CURRENT"
							 component="propagate" />

					<valueof uniform="Hs"
							 type="RENDERER" context="CURRENT"
							 component="Hs" />

					<valueof uniform="Bretschneider_wm"
							 type="RENDERER" context="CURRENT"
							 component="Bretschneider_wm" />

					<valueof uniform="JONSWAP_gamma"
							 type="RENDERER" context="CURRENT"
							 component="JONSWAP_gamma" />

					<valueof uniform="JONSWAP_sigmaA"
							 type="RENDERER" context="CURRENT"
							 component="JONSWAP_sigmaA" />

					<valueof uniform="JONSWAP_sigmaB"
							 type="RENDERER" context="CURRENT"
							 component="JONSWAP_sigmaB" />

					<valueof uniform="Ochi_lambda1"
							 type="RENDERER" context="CURRENT"
							 component="Ochi_lambda1" />

					<valueof uniform="Ochi_lambda2"
							 type="RENDERER" context="CURRENT"
							 component="Ochi_lambda2" />

					<valueof uniform="Ochi_wm1"
							 type="RENDERER" context="CURRENT"
							 component="Ochi_wm1" />

					<valueof uniform="Ochi_wm2"
							 type="RENDERER" context="CURRENT"
							 component="Ochi_wm2" />

					<valueof uniform="Ochi_Hs1"
							 type="RENDERER" context="CURRENT"
							 component="Ochi_Hs1" />

					<valueof uniform="Ochi_Hs2"
							 type="RENDERER" context="CURRENT"
							 component="Ochi_Hs2" />


						
				</values>
			</shader>

			<textures>
				<texture UNIT=0 name="noise1" />
			</textures>
			<imageTextures>
				<imageTexture UNIT=0 texture="h0k" >
					<ACCESS value="WRITE_ONLY" />
				</imageTexture>
			</imageTextures>
 			<buffers>
				<buffer name="oceanInfo">
					<TYPE value="SHADER_STORAGE" />
					<BINDING_POINT value="0" />
				</buffer>
			</buffers>
			
		</material>
		
		<material name="fft_hkt">
			<shader name="hkt">
				<values>
					<valueof uniform="tilde_hkt"
							 type="IMAGE_TEXTURE" context="CURRENT"
							 id=0 component="UNIT" />

					<valueof uniform="tilde_h0k"
							 type="TEXTURE_BINDING" context="CURRENT"
							 id=0 component="UNIT" />

					<valueof uniform="L"
							 type="RENDERER" context="CURRENT"
							 component="L" />

					<valueof uniform="width"
							 type="RENDERER" context="CURRENT"
							 component="width" />

					<valueof uniform="timer" 		
							 type="RENDERER" context="CURRENT"
							 component="TIMER" />

					<valueof uniform="dispersionMode"
							 type="RENDERER" context="CURRENT"
							 component="dispersion" />

					<valueof uniform="depth"
							 type="RENDERER" context="CURRENT"
							 component="oceanDepth" />

				</values>
			</shader>

			<imageTextures>
				<imageTexture UNIT=0 texture="hkt" >
					<ACCESS value="WRITE_ONLY" />
					<LEVEL value=0 />
				</imageTexture>
			</imageTextures>
			<textures>
				<texture UNIT=0 name="h0k" />
			</textures>
		</material>
		
		<material name ="fftHorizontal">
			<shader name="butterflyH">
				<values>
					<valueof uniform="pingpong" 
							 type="RENDERER" context="CURRENT" 
							 component="pingpong" />
							 
					<valueof uniform="log_width" 
							 type="RENDERER" context="CURRENT" 
							 component="log_width" />
							 
					<valueof uniform="stage" 
							 type="RENDERER" context="CURRENT" 
							 component="current_stage" />
							 
					<valueof uniform="pingpong0"
							 type="IMAGE_TEXTURE" context="CURRENT"
							 id=0 component="UNIT" />
							 
					<valueof uniform="pingpong1"
							 type="IMAGE_TEXTURE" context="CURRENT"
							 id=1 component="UNIT" />
							 
				</values>
			</shader>
			<imageTextures> <!-- ping pong textures -->
				<imageTexture UNIT=0 texture="hkt" >
					<ACCESS value="READ_WRITE" />
					<LEVEL value=0 />
				</imageTexture>
				<imageTexture UNIT=1 texture="pingpong" >
					<ACCESS value="READ_WRITE" />
					<LEVEL value=0 />
				</imageTexture>
			</imageTextures>
		</material>
		
		<material name ="fftVertical">
			<shader name="butterflyV">
				<values>
					<valueof uniform="test"
							 type="IMAGE_TEXTURE" context="CURRENT"
							 id=2 component="UNIT" />
					<valueof uniform="pingpong" 
							 type="RENDERER" context="CURRENT" 
							 component="pingpong" />
							 
					<valueof uniform="log_width" 
							 type="RENDERER" context="CURRENT" 
							 component="log_width" />
							 
					<valueof uniform="stage" 
							 type="RENDERER" context="CURRENT" 
							 component="current_stage" />
							 
					<valueof uniform="pingpong0"
							 type="IMAGE_TEXTURE" context="CURRENT"
							 id=0 component="UNIT" />
							 
					<valueof uniform="pingpong1"
							 type="IMAGE_TEXTURE" context="CURRENT"
							 id=1 component="UNIT" />
							 
				</values>
			</shader>
			<imageTextures> <!-- ping pong textures -->
				<imageTexture UNIT=0 texture="hkt" >
					<ACCESS value="READ_WRITE" />
					<LEVEL value=0 />
				</imageTexture>
				<imageTexture UNIT=1 texture="pingpong" >
					<ACCESS value="READ_WRITE" />
					<LEVEL value=0 />
				</imageTexture>
				<imageTexture UNIT=2 texture="test" >
					<ACCESS value="WRITE_ONLY" />
					<LEVEL value=0 />
				</imageTexture>
			</imageTextures>
		</material>	
		
		
		<material name="ocean">
			<shader name=ocean >
				<values>
					
					<valueof uniform="m_pvm" 
							type="RENDERER" context="CURRENT" 
							component="PROJECTION_VIEW_MODEL" />
					
					<valueof uniform="m_view" 
							 type="RENDERER" context="CURRENT" 
							 component="VIEW" />
					 
					<valueof uniform="m_normal" 
							type="RENDERER" context="CURRENT" 
							component="NORMAL" />
					
					<valueof uniform="camPos"
							 type="CAMERA" context="CURRENT" 
							 component="POSITION" />
					 
					<valueof uniform="l_dir"
							 type="LIGHT" context="CURRENT" 
							 component="DIRECTION" id=0/>
					 
					<!-- ocean stuff --> 
					<valueof uniform="htk" 		
							 type="TEXTURE_BINDING" context="CURRENT"
							 component="UNIT" id=0 />

					<valueof uniform="foam" 		
							 type="TEXTURE_BINDING" context="CURRENT"
							 component="UNIT" id=4 />

					<valueof uniform="heightMapSize" 		
							 type="GRID" context="Ocean::Grid"
							 component="DIVISIONS"  />
							 
					<valueof uniform="L" 		
							 type="RENDERER" context="CURRENT"
							 component="L"  />
							 
					<valueof uniform="choppyFactor"
							 type="RENDERER" context="CURRENT"
							 component="choppyFactor" />	

					<!-- sun stuff -->		
					 
					<valueof uniform="sky" 		
							 type="TEXTURE_BINDING" context="CURRENT"
							 component="UNIT" id=5 />

					<value uniform="sunAngles"
							type="RENDERER" context="CURRENT"
							component="sunAngles" />

					<value uniform="Hr"
							type="RENDERER" context="CURRENT"
							component="hr" />
					<value uniform="Hm"
							type="RENDERER" context="CURRENT"
							component="hm" />
					<value uniform="g"
							type="RENDERER" context="CURRENT"
							component="g" />
					<value uniform="betaR"
							type="RENDERER" context="CURRENT"
							component="betaR" />
					<value uniform="betaMf"
							type="RENDERER" context="CURRENT"
							component="betaM" />
					<value uniform="exposure"
							type="RENDERER" context="CURRENT"
							component="exposure" />
					<value uniform="divisions"
							type="RENDERER" context="CURRENT"
							component="steps" />
					<value uniform="divisionsLightRay"
							type="RENDERER" context="CURRENT"
							component="steps light ray" />
					<value uniform="sampling"
							type="RENDERER" context="CURRENT"
							component="sampling" />
				 </values>
			</shader>			
			<textures>
				<texture name="hkt" UNIT = 0 />
				<texture name="voronoi" UNIT = 3 />
				<texture name="foam" UNIT=4 />
				<texture name="sky" UNIT=5 />
			</textures>
			 <buffers>
				<buffer name="oceanInfo">
					<TYPE value="SHADER_STORAGE" />
					<BINDING_POINT value="0" />
				</buffer>
			</buffers>
		</material>
		
		<material name="lambert">
			<shader name=lambert >
				<values>
					<valueof uniform="m_pvm" 
							type="RENDERER" context="CURRENT" 
							component="PROJECTION_VIEW_MODEL" />
					
					<valueof uniform="m_view" 
							 type="RENDERER" context="CURRENT" 
							 component="VIEW" />
					 
					<valueof uniform="m_normal" 
							type="RENDERER" context="CURRENT" 
							component="NORMAL" />
					 
					<valueof uniform="l_dir"
							 type="LIGHT" context="CURRENT" 
							 component="DIRECTION" id=0/>
					 
					<valueof uniform="htk" 		
							 type="TEXTURE_BINDING" context="CURRENT"
							 component="UNIT" id=0 />

					<valueof uniform="L" 		
							 type="RENDERER" context="CURRENT"
							 component="L"  />
							 
					<valueof uniform="windSpeed" 		
							 type="RENDERER" context="CURRENT"
							 component="windSpeed"  />
							 
					<valueof uniform="choppyFactor" 		
							 type="RENDERER" context="CURRENT"
							 component="choppyFactor"  />

					<valueof uniform="heightMapSize" 		
							 type="GRID" context="Ocean::Grid"
							 component="DIVISIONS"  />
							 
							 
				 </values>
			</shader>			
			<textures>
				<texture name="hkt" UNIT = 0 />
			</textures>
		</material>

		
	</materials>
</materialLib>